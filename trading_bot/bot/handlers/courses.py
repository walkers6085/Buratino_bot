import json
from pathlib import Path
from aiogram import Router
from aiogram.types import Message

from ..analytics import track


router = Router()

COURSES_PATH = Path(__file__).resolve().parent.parent / "data" / "courses.json"


def _load_courses() -> dict:
    with open(COURSES_PATH, "r", encoding="utf-8") as f:
        return json.load(f)


@router.message(lambda m: m.text == "üéì –ö—É—Ä—Å—ã")
async def courses_entry(message: Message) -> None:
    courses = _load_courses()
    lesson_id, lesson = next(iter(courses.items()))

    await track(
        user_id=message.from_user.id,
        username=message.from_user.username,
        event_type="course_lesson_viewed",
        payload={"lesson_id": lesson_id},
    )

    text = f"{lesson['title']}\n\n{lesson['text']}\n\n–¢–µ—Å—Ç: {lesson['test']['question']}\n–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(lesson['test']['options'])}\n–û—Ç–≤–µ—Ç—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    await message.answer(text)


@router.message(lambda m: m.reply_to_message and "–¢–µ—Å—Ç:" in (m.reply_to_message.text or ""))
async def courses_test_answer(message: Message) -> None:
    courses = _load_courses()
    lesson_id, lesson = next(iter(courses.items()))
    answer = (message.text or "").strip()
    correct = answer == lesson["test"]["correct"]

    await track(
        user_id=message.from_user.id,
        username=message.from_user.username,
        event_type="course_test_submitted",
        payload={"lesson_id": lesson_id, "answer": answer, "correct": correct},
    )

    await message.answer("–í–µ—Ä–Ω–æ!" if correct else "–ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

